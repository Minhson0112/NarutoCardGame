import discord
from discord.ext import commands
from discord import app_commands
import random


from bot.config.database import getDbSession
from bot.repository.playerRepository import PlayerRepository
from bot.repository.gachaPityCounterRepository import GachaPityCounterRepository
from bot.repository.cardTemplateRepository import CardTemplateRepository
from bot.repository.playerCardRepository import PlayerCardRepository
from bot.repository.dailyTaskRepository import DailyTaskRepository
from bot.services.playerService import PlayerService
from bot.config.gachaConfig import GACHA_PRICES, PITY_LIMIT, PITY_PROTECTION, GACHA_DROP_RATE
from bot.config.imageMap import CARD_IMAGE_MAP
from bot.entity.cardTemplate import CardTemplate

class BuyCard(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="buycard", description="Mua g√≥i m·ªü th·∫ª v√† m·ªü h·ªôp ngay l·∫≠p t·ª©c")
    @app_commands.describe(
        pack="T√™n g√≥i m·ªü th·∫ª (card_basic, card_advanced, card_elite)"
    )
    @app_commands.choices(pack=[
        app_commands.Choice(name="card_basic", value="card_basic"),
        app_commands.Choice(name="card_advanced", value="card_advanced"),
        app_commands.Choice(name="card_elite", value="card_elite")
    ])
    async def buyCard(self, interaction: discord.Interaction, pack: str):
        await interaction.response.defer(thinking=True)
        playerId = interaction.user.id

        try:
            with getDbSession() as session:
                # Kh·ªüi t·∫°o c√°c repository c·∫ßn thi·∫øt
                playerRepo = PlayerRepository(session)
                pityRepo = GachaPityCounterRepository(session)
                cardTemplateRepo = CardTemplateRepository(session)
                playerCardRepo = PlayerCardRepository(session)
                playerService = PlayerService(playerRepo)
                dailyTaskRepo = DailyTaskRepository(session)

                # Ki·ªÉm tra t√†i kho·∫£n ng∆∞·ªùi ch∆°i
                player = playerRepo.getById(playerId)
                if not player:
                    await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y d√πng `/register` tr∆∞·ªõc nh√©!")
                    return

                # Ki·ªÉm tra g√≥i m·ªü th·∫ª h·ª£p l·ªá
                if pack not in GACHA_PRICES:
                    validPacks = ", ".join(GACHA_PRICES.keys())
                    await interaction.followup.send(f"‚ùå G√≥i '{pack}' kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn: {validPacks}")
                    return

                # T√≠nh chi ph√≠ cho 1 l∆∞·ª£t m·ªü g√≥i
                cost = GACHA_PRICES[pack]
                if player.coin_balance < cost:
                    await interaction.followup.send(f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß. C·∫ßn {cost:,} Ryo, hi·ªán c√≥ {player.coin_balance:,} Ryo.")
                    return

                # Tr·ª´ ti·ªÅn
                playerService.addCoin(playerId, -cost)

                # H√†m m·ªü h·ªôp cho 1 l∆∞·ª£t
                def openPack(playerId, pack) -> CardTemplate:
                    counter = pityRepo.getCount(playerId, pack)
                    limit = PITY_LIMIT[pack]
                    protectionTier = PITY_PROTECTION[pack]

                    if counter + 1 >= limit:
                        outcomeTier = protectionTier
                        pityRepo.resetCounter(playerId, pack)
                    else:
                        rates = GACHA_DROP_RATE[pack]
                        tiers = list(rates.keys())
                        weights = list(rates.values())
                        outcomeTier = random.choices(tiers, weights=weights, k=1)[0]
                        pityRepo.incrementCounter(playerId, pack, increment=1)
                    
                    # L·∫•y ng·∫´u nhi√™n card t·ª´ b·∫£ng card_templates theo tier
                    card = cardTemplateRepo.getRandomByTier(outcomeTier)
                    return card

                card = openPack(playerId, pack)
                if not card:
                    await interaction.followup.send("‚ùå L·ªói khi m·ªü h·ªôp, kh√¥ng t√¨m th·∫•y th·∫ª ph√π h·ª£p.")
                    return
                
                dailyTaskRepo.updateShopBuy(playerId)
                # Th√™m card v√†o kho c·ªßa ng∆∞·ªùi ch∆°i
                playerCardRepo.incrementQuantity(playerId, card.card_key, increment=1)

                # L·∫•y URL ·∫£nh th·ª±c t·ª´ CARD_IMAGE_MAP (card.image_url l∆∞u key)
                imageUrl = CARD_IMAGE_MAP.get(card.image_url, card.image_url)

                # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin c·ªßa th·∫ª nh·∫≠n ƒë∆∞·ª£c
                embed = discord.Embed(
                    title=f"üéâ B·∫°n ƒë√£ mua g√≥i {pack} v√† m·ªü ƒë∆∞·ª£c th·∫ª: {card.name}",
                    description=(
                        f"**S·ª©c m·∫°nh:** {card.base_power}\n"
                        f"**B·∫≠c:** {card.tier}\n"
                        f"**H·ªá:** {card.element}\n"
                        f"**Gi√° b√°n:** {card.sell_price:,} Ryo\n\n"
                        f"Th·∫ª ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho c·ªßa b·∫°n. Ki·ªÉm tra kho b·∫±ng l·ªánh `/inventory`."
                    ),
                    color=discord.Color.green()
                )
                embed.set_image(url=imageUrl)
                await interaction.followup.send(embed=embed)
        except Exception as e:
            print("‚ùå L·ªói khi x·ª≠ l√Ω buycard:", e)
            await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")

async def setup(bot):
    await bot.add_cog(BuyCard(bot))
