import discord
from discord.ext import commands
from discord import app_commands
import random
import asyncio

from bot.config.database import getDbSession
from bot.repository.playerRepository import PlayerRepository
from bot.repository.dailyTaskRepository import DailyTaskRepository

class Blackjack(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # ƒê·ªãnh nghƒ©a c√°c l√° b√†i b·∫±ng emoji v√† gi√° tr·ªã t∆∞∆°ng ·ª©ng
        self.card_map = {
            "A": {"value": 1, "emojis": ["A‚ô†Ô∏è", "A‚ô£Ô∏è", "A‚ô•Ô∏è", "A‚ô¶Ô∏è"]},
            "2": {"value": 2, "emojis": ["2‚ô†Ô∏è", "2‚ô£Ô∏è", "2‚ô•Ô∏è", "2‚ô¶Ô∏è"]},
            "3": {"value": 3, "emojis": ["3‚ô†Ô∏è", "3‚ô£Ô∏è", "3‚ô•Ô∏è", "3‚ô¶Ô∏è"]},
            "4": {"value": 4, "emojis": ["4‚ô†Ô∏è", "4‚ô£Ô∏è", "4‚ô•Ô∏è", "4‚ô¶Ô∏è"]},
            "5": {"value": 5, "emojis": ["5‚ô†Ô∏è", "5‚ô£Ô∏è", "5‚ô•Ô∏è", "5‚ô¶Ô∏è"]},
            "6": {"value": 6, "emojis": ["6‚ô†Ô∏è", "6‚ô£Ô∏è", "6‚ô•Ô∏è", "6‚ô¶Ô∏è"]},
            "7": {"value": 7, "emojis": ["7‚ô†Ô∏è", "7‚ô£Ô∏è", "7‚ô•Ô∏è", "7‚ô¶Ô∏è"]},
            "8": {"value": 8, "emojis": ["8‚ô†Ô∏è", "8‚ô£Ô∏è", "8‚ô•Ô∏è", "8‚ô¶Ô∏è"]},
            "9": {"value": 9, "emojis": ["9‚ô†Ô∏è", "9‚ô£Ô∏è", "9‚ô•Ô∏è", "9‚ô¶Ô∏è"]},
            "10": {"value": 10, "emojis": ["10‚ô†Ô∏è", "10‚ô£Ô∏è", "10‚ô•Ô∏è", "10‚ô¶Ô∏è"]},
            "J": {"value": 10, "emojis": ["J‚ô†Ô∏è", "J‚ô£Ô∏è", "J‚ô•Ô∏è", "J‚ô¶Ô∏è"]},
            "Q": {"value": 10, "emojis": ["Q‚ô†Ô∏è", "Q‚ô£Ô∏è", "Q‚ô•Ô∏è", "Q‚ô¶Ô∏è"]},
            "K": {"value": 10, "emojis": ["K‚ô†Ô∏è", "K‚ô£Ô∏è", "K‚ô•Ô∏è", "K‚ô¶Ô∏è"]},
        }
        
    def create_deck(self):
        """T·∫°o m·ªôt b·ªô b√†i d·ª±a theo card_map v√† tr·ªôn ng·∫´u nhi√™n."""
        deck = []
        for rank, info in self.card_map.items():
            for emoji in info["emojis"]:
                deck.append({"card": emoji, "value": info["value"]})
        random.shuffle(deck)
        return deck
    
    def calculate_total(self, cards):
        """T√≠nh t·ªïng ƒëi·ªÉm c·ªßa c√°c l√° b√†i trong list cards."""
        return sum(card["value"] for card in cards)
    
    def get_rank(self, card_emoji: str) -> str:
        """L·∫•y x·∫øp h·∫°ng c·ªßa l√° b√†i t·ª´ emoji.
           V·ªõi l√° "10" tr·∫£ v·ªÅ '10', c√≤n l·∫°i tr·∫£ v·ªÅ k√Ω t·ª± ƒë·∫ßu ti√™n."""
        if card_emoji.startswith("10"):
            return "10"
        return card_emoji[0]
    
    def is_blackjack(self, cards):
        """Ki·ªÉm tra b√†i c√≥ ph·∫£i blackjack kh√¥ng: ƒë√∫ng 2 l√°, trong ƒë√≥ c√≥ ƒë√∫ng 1 l√° A v√†
           l√° c√≤n l·∫°i thu·ªôc nh√≥m ['10', 'J', 'Q', 'K']."""
        if len(cards) != 2:
            return False
        ranks = [self.get_rank(card["card"]) for card in cards]
        return (ranks.count("A") == 1) and any(rank in ["10", "J", "Q", "K"] for rank in ranks if rank != "A")
    
    def is_double_ace(self, cards):
        """Ki·ªÉm tra xem b√†i c√≥ ph·∫£i 2 con A kh√¥ng (xi b√†n)."""
        if len(cards) != 2:
            return False
        return self.get_rank(cards[0]["card"]) == "A" and self.get_rank(cards[1]["card"]) == "A"
    
    @app_commands.command(name="blackjack", description="Ch∆°i blackjack ƒë∆°n gi·∫£n v·ªõi s·ªë ti·ªÅn c∆∞·ª£c")
    @app_commands.describe(bet="S·ªë ti·ªÅn c∆∞·ª£c b·∫°n mu·ªën ƒë·∫∑t üí∞")
    async def blackjack(self, interaction: discord.Interaction, bet: int):
        await interaction.response.defer(thinking=True)
        player_id = interaction.user.id

        try:
            with getDbSession() as session:
                # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
                playerRepo = PlayerRepository(session)
                dailyTaskRepo = DailyTaskRepository(session)
                
                player = playerRepo.getById(player_id)
                if not player:
                    await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y d√πng /register tr∆∞·ªõc nh√©!")
                    return
                
                if bet <= 0:
                    await interaction.followup.send("‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.")
                    return

                if bet > 1000000:
                    await interaction.followup.send("‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng ƒë∆∞∆°Ã£c quaÃÅ 1m.")
                    return

                if player.coin_balance < bet:
                    await interaction.followup.send("‚ö†Ô∏è S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß.")
                    return
                dailyTaskRepo.updateMinigame(player_id)
                # T·∫°o b·ªô b√†i v√† chia b√†i ban ƒë·∫ßu
                deck = self.create_deck()
                player_cards = [deck.pop(), deck.pop()]
                dealer_cards = [deck.pop(), deck.pop()]

                player_total = self.calculate_total(player_cards)
                # Ban ƒë·∫ßu ch·ªâ hi·ªán th·ªã l√° ƒë·∫ßu c·ªßa nh√† c√°i, c√°c l√° c√≤n l·∫°i ·∫©n b·∫±ng ‚ùì
                dealer_display = dealer_cards[0]["card"] + " " + " ".join("‚ùì" for _ in dealer_cards[1:])
                
                # T·∫°o embed ban ƒë·∫ßu
                embed = discord.Embed(
                    title="‚ô†Ô∏è Blackjack Game ‚ô£Ô∏è",
                    description=(
                        f"**B√†i c·ªßa b·∫°n:** {' '.join(card['card'] for card in player_cards)} (T·ªïng: {player_total})\n\n"
                        f"**B√†i c·ªßa Nh√† C√°i:** {dealer_display}\n\n"
                        "üü¢: R√∫t b√†i (Hit) | üî¥: D·ª´ng (Stand)\n"
                        f"Bet: {bet}"
                    ),
                    color=discord.Color.green()
                )
                # G·ª≠i tin nh·∫Øn game ban ƒë·∫ßu
                msg = await interaction.followup.send(embed=embed)
                
                # --- Ki·ªÉm tra t√¨nh hu·ªëng ‚Äúxi b√†n‚Äù 2 A ngay ban ƒë·∫ßu (∆∞u ti√™n so v·ªõi blackjack) ---
                player_double_ace = self.is_double_ace(player_cards)
                dealer_double_ace = self.is_double_ace(dealer_cards)
                if player_double_ace or dealer_double_ace:
                    final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                    if player_double_ace and not dealer_double_ace:
                        outcome = "üéâ B·∫°n c√≥ 2 con A (xi b√†n)! B·∫°n th·∫Øng x4 ti·ªÅn!"
                        player.coin_balance += bet * 4
                    elif dealer_double_ace and not player_double_ace:
                        outcome = "üò¢ Nh√† C√°i c√≥ 2 con A (xi b√†n)! B·∫°n thua x4 ti·ªÅn!"
                        player.coin_balance -= bet * 4
                    else:
                        outcome = "ü§ù C·∫£ hai ƒë·ªÅu c√≥ 2 con A (xi b√†n)! H√≤a!"
                    embed.description = (
                        f"**B√†i c·ªßa b·∫°n:** {' '.join(card['card'] for card in player_cards)}\n\n"
                        f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display}\n\n"
                        f"{outcome}\n"
                        f"S·ªë d∆∞ hi·ªán t·∫°i: **{player.coin_balance}**"
                    )
                    await msg.edit(embed=embed)
                    session.commit()
                    return
                
                # Ki·ªÉm tra ngay blackjack (1 A v√† 1 trong [10,J,Q,K])
                player_blackjack = self.is_blackjack(player_cards)
                dealer_blackjack = self.is_blackjack(dealer_cards)
                if player_blackjack or dealer_blackjack:
                    final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                    if player_blackjack and not dealer_blackjack:
                        outcome = "üéâ Blackjack! B·∫°n th·∫Øng x3 ti·ªÅn!"
                        player.coin_balance += bet * 3
                    elif player_blackjack and dealer_blackjack:
                        outcome = "üò¢ C·∫£ hai c√πng blackjack! Nh√† C√°i th·∫Øng!"
                        player.coin_balance -= bet
                    elif dealer_blackjack and not player_blackjack:
                        outcome = "üò¢ Nh√† C√°i c√≥ blackjack! B·∫°n thua!"
                        player.coin_balance -= bet
                    embed.description = (
                        f"**B√†i c·ªßa b·∫°n:** {' '.join(card['card'] for card in player_cards)}\n\n"
                        f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display}\n\n"
                        f"{outcome}\n"
                        f"S·ªë d∆∞ hi·ªán t·∫°i: **{player.coin_balance}**"
                    )
                    await msg.edit(embed=embed)
                    session.commit()
                    return
                
                # N·∫øu kh√¥ng x·∫£y ra t√¨nh hu·ªëng ƒë·∫∑c bi·ªát, cho ng∆∞·ªùi ch∆°i t∆∞∆°ng t√°c (Hit/Stand)
                HIT_EMOJI = "üü¢"
                STAND_EMOJI = "üî¥"
                await msg.add_reaction(HIT_EMOJI)
                await msg.add_reaction(STAND_EMOJI)
                
                def check(reaction, user):
                    return (
                        user.id == player_id and 
                        reaction.message.id == msg.id and 
                        str(reaction.emoji) in [HIT_EMOJI, STAND_EMOJI]
                    )
                
                player_busted = False
                player_five_card = False  # c·ªù ki·ªÉm tra ‚Äúng≈© linh‚Äù c·ªßa ng∆∞·ªùi ch∆°i
                # V√≤ng l·∫∑p l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i
                while True:
                    try:
                        reaction, user = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)
                    except asyncio.TimeoutError:
                        break
                    if str(reaction.emoji) == HIT_EMOJI:
                        try:
                            await msg.remove_reaction(HIT_EMOJI, user)
                        except Exception:
                            pass
                        new_card = deck.pop()
                        player_cards.append(new_card)
                        player_total = self.calculate_total(player_cards)
                        if player_total > 21:
                            player_busted = True
                            break
                        if len(player_cards) == 5 and player_total <= 21:
                            player_five_card = True
                            break
                        player_display = " ".join(card["card"] for card in player_cards)
                        embed.description = (
                            f"**B√†i c·ªßa b·∫°n:** {player_display} (T·ªïng: {player_total})\n\n"
                            f"**B√†i c·ªßa Nh√† C√°i:** {dealer_display}\n\n"
                            "üü¢: R√∫t b√†i (Hit) | üî¥: D·ª´ng (Stand)\n"
                            f"Bet: {bet}"
                        )
                        await msg.edit(embed=embed)
                    elif str(reaction.emoji) == STAND_EMOJI:
                        break

                if player_five_card:
                    outcome = "üéâ B·∫°n ƒë·∫°t 5 l√° kh√¥ng qu√° 21 (Ng≈© linh)! B·∫°n th·∫Øng ngay!"
                    player.coin_balance += bet
                    final_player_display = " ".join(card["card"] for card in player_cards)
                    final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                    embed.description = (
                        f"**B√†i c·ªßa b·∫°n:** {final_player_display} (T·ªïng: {player_total})\n\n"
                        f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display}\n\n"
                        f"{outcome}\n"
                        f"S·ªë d∆∞ hi·ªán t·∫°i: **{player.coin_balance}**"
                    )
                    await msg.edit(embed=embed)
                    session.commit()
                    return

                if player_busted:
                    dealer_total = self.calculate_total(dealer_cards)
                    final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                    if dealer_total >= 15:
                        outcome = "üò¢ B·∫°n b·ªã qu·∫Øc, b·∫°n thua!"
                        player.coin_balance -= bet
                    else:
                        embed.description = (
                            f"**B√†i c·ªßa b·∫°n:** {' '.join(card['card'] for card in player_cards)} (T·ªïng: {player_total})\n\n"
                            f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display} (T·ªïng: {dealer_total})\n\n"
                            "Nh√† C√°i ƒëang b·ªëc b√†i..."
                        )
                        await msg.edit(embed=embed)
                        await asyncio.sleep(1)
                        while dealer_total < 15 and len(deck) > 0:
                            new_card = deck.pop()
                            dealer_cards.append(new_card)
                            dealer_total = self.calculate_total(dealer_cards)
                            final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                            embed.description = (
                                f"**B√†i c·ªßa b·∫°n:** {' '.join(card['card'] for card in player_cards)} (T·ªïng: {player_total})\n\n"
                                f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display} (T·ªïng: {dealer_total})\n\n"
                                "Nh√† C√°i ƒëang b·ªëc b√†i..."
                            )
                            await msg.edit(embed=embed)
                            await asyncio.sleep(1)
                        if dealer_total > 21:
                            outcome = "ü§ù C·∫£ Nh√† C√°i c≈©ng qu·∫Øc, k·∫øt qu·∫£ h√≤a, b·∫°n kh√¥ng m·∫•t ti·ªÅn!"
                        else:
                            outcome = f"üò¢ Sau khi b·ªëc, Nh√† C√°i c√≥ {dealer_total} ƒëi·ªÉm, b·∫°n thua!"
                            player.coin_balance -= bet

                    final_player_display = " ".join(card["card"] for card in player_cards)
                    final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                    embed.description = (
                        f"**B√†i c·ªßa b·∫°n:** {final_player_display} (T·ªïng: {player_total})\n\n"
                        f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display} (T·ªïng: {dealer_total})\n\n"
                        f"{outcome}\n"
                        f"S·ªë d∆∞ hi·ªán t·∫°i: **{player.coin_balance}**"
                    )
                    await msg.edit(embed=embed)
                    session.commit()
                    return

                dealer_total = self.calculate_total(dealer_cards)
                final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                embed.description = (
                    f"**B√†i c·ªßa b·∫°n:** {' '.join(card['card'] for card in player_cards)} (T·ªïng: {player_total})\n\n"
                    f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display} (T·ªïng: {dealer_total})\n\n"
                    "Nh√† C√°i b·∫Øt ƒë·∫ßu r√∫t b√†i..."
                )
                await msg.edit(embed=embed)
                await asyncio.sleep(1)

                dealer_five_card = False  # c·ªù ki·ªÉm tra ‚Äúng≈© linh‚Äù c·ªßa Nh√† C√°i
                while dealer_total < 17 and len(deck) > 0:
                    new_card = deck.pop()
                    dealer_cards.append(new_card)
                    dealer_total = self.calculate_total(dealer_cards)
                    final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                    if len(dealer_cards) == 5 and dealer_total <= 21:
                        dealer_five_card = True
                        outcome = "üò¢ Nh√† C√°i ƒë·∫°t 5 l√° kh√¥ng qu√° 21 (Ng≈© linh)! B·∫°n thua!"
                        player.coin_balance -= bet
                        break

                    embed.description = (
                        f"**B√†i c·ªßa b·∫°n:** {' '.join(card['card'] for card in player_cards)} (T·ªïng: {player_total})\n\n"
                        f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display} (T·ªïng: {dealer_total})\n\n"
                        "Nh√† C√°i r√∫t b√†i..."
                    )
                    await msg.edit(embed=embed)
                    await asyncio.sleep(1)

                if dealer_five_card:
                    final_player_display = " ".join(card["card"] for card in player_cards)
                    final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                    embed.description = (
                        f"**B√†i c·ªßa b·∫°n:** {final_player_display} (T·ªïng: {player_total})\n\n"
                        f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display} (T·ªïng: {dealer_total})\n\n"
                        f"{outcome}\n"
                        f"S·ªë d∆∞ hi·ªán t·∫°i: **{player.coin_balance}**"
                    )
                    await msg.edit(embed=embed)
                    session.commit()
                    return

                final_player_display = " ".join(card["card"] for card in player_cards)
                final_dealer_display = " ".join(card["card"] for card in dealer_cards)
                if dealer_total > 21:
                    outcome = "üéâ Nh√† C√°i b·ªã qu·∫Øc! B·∫°n th·∫Øng!"
                    player.coin_balance += bet
                else:
                    if player_total > dealer_total:
                        outcome = "üéâ B·∫°n th·∫Øng!"
                        player.coin_balance += bet
                    elif player_total == dealer_total:
                        outcome = "ü§ù H√≤a!"
                    else:
                        outcome = "üò¢ B·∫°n thua!"
                        player.coin_balance -= bet

                embed.description = (
                    f"**B√†i c·ªßa b·∫°n:** {final_player_display} (T·ªïng: {player_total})\n\n"
                    f"**B√†i c·ªßa Nh√† C√°i:** {final_dealer_display} (T·ªïng: {dealer_total})\n\n"
                    f"{outcome}\n"
                    f"S·ªë d∆∞ hi·ªán t·∫°i: **{player.coin_balance}**"
                )
                await msg.edit(embed=embed)
                session.commit()

        except Exception as e:
            print("‚ùå L·ªói khi x·ª≠ l√Ω /blackjack:", e)
            await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")

async def setup(bot):
    await bot.add_cog(Blackjack(bot))
