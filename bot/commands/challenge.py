import discord
from discord.ext import commands
from discord import app_commands
from sqlalchemy import func

from bot.config.database import getDbSession
from bot.repository.playerRepository import PlayerRepository
from bot.repository.playerCardRepository import PlayerCardRepository
from bot.repository.playerWeaponRepository import PlayerWeaponRepository
from bot.repository.playerActiveSetupRepository import PlayerActiveSetupRepository
from bot.config.config import VS_IMAGE, NONE_CARD_IMAGE_URL, NONE_WEAPON_IMAGE_URL
from bot.config.imageMap import CARD_IMAGE_MAP, WEAPON_IMAGE_MAP, STORY_IMAGE_MAP
from bot.entity.challenge import Challenge

class ChallengeGame(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="challenge", description="V∆∞∆°Ã£t qua th∆∞Ãâ thaÃÅch ƒë√™Ãâ nh√¢Ã£n th∆∞∆°Ãâng")
    async def challenge(self, interaction: discord.Interaction):
        await interaction.response.defer(thinking=True)
        player_id = interaction.user.id

        try:
            with getDbSession() as session:
                # Kh·ªüi t·∫°o c√°c repository c·∫ßn thi·∫øt
                playerRepo = PlayerRepository(session)
                cardRepo = PlayerCardRepository(session)
                weaponRepo = PlayerWeaponRepository(session)
                activeSetupRepo = PlayerActiveSetupRepository(session)

                # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
                player = playerRepo.getById(player_id)
                if not player:
                    await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y d√πng /register tr∆∞·ªõc nh√©!")
                    return

                # Ki·ªÉm tra active setup c·ªßa ng∆∞·ªùi ch∆°i (ph·∫£i ƒë√£ l·∫Øp th·∫ª chi·∫øn ƒë·∫•u)
                activeSetup = activeSetupRepo.getByPlayerId(player_id)
                if not activeSetup or activeSetup.active_card_id is None:
                    await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a l·∫Øp th·∫ª chi·∫øn ƒë·∫•u. H√£y d√πng /setcard tr∆∞·ªõc khi th·ª≠ th√°ch.")
                    return

                # L·∫•y th·∫ª chi·∫øn ƒë·∫•u v√† v≈© kh√≠ c·ªßa ng∆∞·ªùi ch∆°i
                attackerCard = cardRepo.getById(activeSetup.active_card_id)
                attackerWeapon = None
                if activeSetup.weapon_slot1 is not None:
                    attackerWeapon = weaponRepo.getById(activeSetup.weapon_slot1)

                # T√≠nh s·ª©c m·∫°nh c·ªßa ng∆∞·ªùi ch∆°i
                try:
                    attackerCardStrength = attackerCard.template.base_power * attackerCard.level
                except Exception:
                    attackerCardStrength = 0
                attackerWeaponStrength = 0
                if attackerWeapon:
                    try:
                        attackerWeaponStrength = attackerWeapon.template.bonus_power * attackerWeapon.level
                    except Exception:
                        attackerWeaponStrength = 0
                attackerTotalStrength = attackerCardStrength + attackerWeaponStrength

                # X√°c ƒë·ªãnh challenge hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ch∆°i:
                # N·∫øu player.challenge_id l√† null th√¨ currentChallengeId = 1; ng∆∞·ª£c l·∫°i, d√πng gi√° tr·ªã c·ªßa player.challenge_id.
                currentChallengeId = player.challenge_id if player.challenge_id is not None else 1

                # L·∫•y th·ª≠ th√°ch (challenge) d·ª±a tr√™n currentChallengeId
                challenge = session.query(Challenge).filter_by(id=currentChallengeId).first()
                if not challenge:
                    await interaction.followup.send("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th·ª≠ th√°ch cho ID n√†y. Vui l√≤ng li√™n h·ªá admin.")
                    return

                # S·ª≠ d·ª•ng STORY_IMAGE_MAP ƒë·ªÉ l·∫•y URL ·∫£nh d·ª±a tr√™n challenge.image_url_key
                challengeImageUrl = STORY_IMAGE_MAP.get(challenge.image_url_key, NONE_CARD_IMAGE_URL)

                # So s√°nh s·ª©c m·∫°nh: n·∫øu attackerTotalStrength > challenge.card_strength => th·∫Øng;
                # n·∫øu attackerTotalStrength <= challenge.card_strength => thua (kh√¥ng m·∫•t g√¨)
                if attackerTotalStrength > challenge.card_strength:
                    result = "win"
                    outcome_text = (
                        f"ü•≥ Ch√∫c m·ª´ng! B·∫°n ƒë√£ v∆∞·ª£t qua th·ª≠ th√°ch **{challenge.card_name}**.\n"
                        f"Nh·∫≠n th∆∞·ªüng: **{challenge.bonus_ryo} Ryo**!"
                    )
                    # C·ªông th∆∞·ªüng bonus_ryo v√†o s·ªë d∆∞
                    player.coin_balance += challenge.bonus_ryo
                    # C·∫≠p nh·∫≠t challenge_id: n·∫øu ban ƒë·∫ßu l√† null th√¨ ƒë·∫∑t th√†nh 2; n·∫øu kh√¥ng th√¨ tƒÉng th√™m 1
                    if player.challenge_id is None:
                        player.challenge_id = 2
                    else:
                        player.challenge_id += 1

                    # Ki·ªÉm tra xem player.challenge_id c√≥ v∆∞·ª£t qu√° max challenge hi·ªán c√≥ hay kh√¥ng
                    maxChallengeId = 32
                    if player.challenge_id == maxChallengeId:
                        outcome_text += "\n\nüéâ B·∫°n ƒë√£ v∆∞·ª£t qua h·∫øt c√°c th·ª≠ th√°ch hi·ªán c√≥. Ch√∫ng t√¥i s·∫Ω c·∫≠p nh·∫≠t th√™m th·ª≠ th√°ch m·ªõi trong t∆∞∆°ng lai!"
                else:
                    result = "loss"
                    outcome_text = (
                        f"üò¢ R·∫•t ti·∫øc! B·∫°n kh√¥ng v∆∞·ª£t qua th·ª≠ th√°ch **{challenge.card_name}**.\n"
                        f"B·∫°n kh√¥ng nh·∫≠n ƒë∆∞·ª£c th∆∞·ªüng."
                    )
                    # N·∫øu thua, kh√¥ng c·∫≠p nh·∫≠t s·ªë d∆∞ hay challenge_id

                session.commit()

                # --- Embed th√¥ng tin ng∆∞·ªùi t·∫•n c√¥ng (Embed 1) ---
                attackerCardInfo = (
                    f"‚Ä¢ ü•∑ **T√™n th·∫ª:** {attackerCard.template.name}\n"
                    f"  ‚î£ **B·∫≠c:** {attackerCard.template.tier}\n"
                    f"  ‚î£ **H·ªá:** {attackerCard.template.element}\n"
                    f"  ‚îó **Level:** {attackerCard.level}"
                )
                if attackerWeapon:
                    attackerWeaponInfo = (
                        f"‚Ä¢ üî™ **T√™n v≈© kh√≠:** {attackerWeapon.template.name}\n"
                        f"  ‚î£ **B·∫≠c:** {attackerWeapon.template.grade}\n"
                        f"  ‚îó **Level:** {attackerWeapon.level}"
                    )
                else:
                    attackerWeaponInfo = "‚Ä¢ üî™ **V≈© kh√≠:** Ch∆∞a c√†i ƒë·∫∑t"
                attackerDescription = (
                    f"**Th√¥ng tin Th·∫ª Chi·∫øn ƒê·∫•u:**\n{attackerCardInfo}\n\n"
                    f"**Th√¥ng tin V≈© Kh√≠:**\n{attackerWeaponInfo}\n\n"
                    f"**T·ªïng S·ª©c M·∫°nh:** {attackerTotalStrength}"
                )
                embedAttacker = discord.Embed(
                    title=f"Tham gia th∆∞Ãâ thaÃÅch: {player.username}",
                    description=attackerDescription,
                    color=discord.Color.gold()
                )
                # Hi·ªÉn th·ªã ·∫£nh th·∫ª ·ªü ph·∫ßn image
                embedAttacker.set_image(url=CARD_IMAGE_MAP.get(attackerCard.template.image_url, NONE_CARD_IMAGE_URL))
                # Hi·ªÉn th·ªã ·∫£nh v≈© kh√≠ ·ªü ph·∫ßn thumbnail (n·∫øu c√≥)
                if attackerWeapon:
                    embedAttacker.set_thumbnail(url=WEAPON_IMAGE_MAP.get(attackerWeapon.template.image_url, NONE_WEAPON_IMAGE_URL))
                else:
                    embedAttacker.set_thumbnail(url=NONE_WEAPON_IMAGE_URL)
                embedAttacker.set_footer(text=f"ƒêi·ªÉm rank: {player.rank_points}")

                # --- Embed VS (Embed 2) ---
                embedVs = discord.Embed(color=discord.Color.dark_red())
                embedVs.set_image(url=VS_IMAGE)

                # --- Embed th√¥ng tin th·ª≠ th√°ch (Embed 3) ---
                challengeDescription = (
                    f"**N·ªôi dung:** {challenge.narrative}\n\n"
                    f"**S·ª©c M·∫°nh Th·ª≠ Th√°ch:** {challenge.card_strength}\n"
                    f"**Ti·ªÅn th∆∞·ªüng:** {challenge.bonus_ryo} Ryo"
                )
                embedChallenge = discord.Embed(
                    title=f"**T√™n th∆∞Ãâ thaÃÅch:** {challenge.card_name}",
                    description=challengeDescription,
                    color=discord.Color.purple()
                )
                embedChallenge.set_image(url=challengeImageUrl)
                embedChallenge.set_footer(text=f"Th·ª≠ th√°ch hi·ªán t·∫°i c·ªßa b·∫°n: {currentChallengeId}")

                # --- Embed k·∫øt qu·∫£ (Embed 4) ---
                finalColor = discord.Color.green() if result == "win" else discord.Color.red()
                embedResult = discord.Embed(
                    title="K·∫øt qu·∫£ Th·ª≠ Th√°ch",
                    description=(
                        f"**K·∫øt qu·∫£:** {result.upper()}\n"
                        f"S·ª©c m·∫°nh c·ªßa b·∫°n: **{attackerTotalStrength}**\n"
                        f"S·ª©c m·∫°nh th·ª≠ th√°ch: **{challenge.card_strength}**\n\n"
                        f"{outcome_text}"
                    ),
                    color=finalColor
                )

                # G·ª≠i 4 Embed c√πng l√∫c b·∫±ng followup.send (v√¨ interaction ƒë√£ ƒë∆∞·ª£c defer)
                await interaction.followup.send(embeds=[embedAttacker, embedVs, embedChallenge, embedResult])
        except Exception as e:
            print("‚ùå L·ªói khi x·ª≠ l√Ω /challenge:", e)
            await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(ChallengeGame(bot))
