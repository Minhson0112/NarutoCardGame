import discord
from discord.ext import commands
from discord import app_commands
import random
import asyncio

from bot.config.database import getDbSession
from bot.repository.playerRepository import PlayerRepository

class NarutoTrapGame:
    def __init__(self, user: discord.User, bet: int):
        self.user = user
        self.bet = bet
        self.rows = 5
        self.cols = 5
        # T·∫°o grid 5x5 v·ªõi emoji üå≥
        self.grid = [["üå≥" for _ in range(self.cols)] for _ in range(self.rows)]
        # V·ªã tr√≠ ban ƒë·∫ßu c·ªßa ng∆∞·ªùi ch∆°i: √¥ d∆∞·ªõi c√πng, gi·ªØa c·ªôt
        self.player_pos = [self.rows - 1, self.cols // 2]
        self.grid[self.player_pos[0]][self.player_pos[1]] = "ü•∑"
        # Random 3 v·ªã tr√≠ b·∫´y (bomb) t·ª´ c√°c √¥ kh√¥ng ph·∫£i v·ªã tr√≠ b·∫Øt ƒë·∫ßu
        possible_positions = [
            (r, c)
            for r in range(self.rows)
            for c in range(self.cols)
            if (r, c) != (self.player_pos[0], self.player_pos[1])
        ]
        self.bombs = random.sample(possible_positions, 3)
    
    def grid_to_str(self) -> str:
        """Chuy·ªÉn grid th√†nh chu·ªói hi·ªÉn th·ªã."""
        return "\n".join("".join(row) for row in self.grid)
    
    def move_player(self, direction: str) -> (bool, str):
        """
        Di chuy·ªÉn nh√¢n v·∫≠t theo h∆∞·ªõng: "up", "left" ho·∫∑c "right".
        Tr·∫£ v·ªÅ tuple (bool, message):
          - N·∫øu di chuy·ªÉn h·ª£p l·ªá: 
              "bomb" n·∫øu ƒëi v√†o bom,
              "win" n·∫øu ƒë·∫øn h√†ng ƒë·∫ßu,
              "moved" n·∫øu di chuy·ªÉn th√†nh c√¥ng.
          - N·∫øu kh√¥ng h·ª£p l·ªá: (False, th√¥ng b√°o l·ªói).
        """
        r, c = self.player_pos
        new_r, new_c = r, c
        if direction == "up":
            new_r = r - 1
        elif direction == "left":
            new_c = c - 1
        elif direction == "right":
            new_c = c + 1
        else:
            return False, "H∆∞·ªõng di chuy·ªÉn kh√¥ng h·ª£p l·ªá."

        # Ki·ªÉm tra bi√™n gi·ªõi
        if new_r < 0 or new_r >= self.rows or new_c < 0 or new_c >= self.cols:
            return False, "H∆∞·ªõng di chuy·ªÉn kh√¥ng h·ª£p l·ªá (ra ngo√†i bi√™n)."

        # Xo√° v·ªã tr√≠ c≈©, chuy·ªÉn √¥ ƒë√≥ v·ªÅ üå≥
        self.grid[r][c] = "üå≥"
        self.player_pos = [new_r, new_c]

        # N·∫øu √¥ m·ªõi ch·ª©a bom, hi·ªÉn th·ªã bom (üí£)
        if (new_r, new_c) in self.bombs:
            self.grid[new_r][new_c] = "üí£"
            return True, "bomb"
        else:
            self.grid[new_r][new_c] = "ü•∑"
            if new_r == 0:
                return True, "win"
            return True, "moved"

class NarutoTrap(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="narutotrap", description="Ch∆°i minigame Naruto Trap v·ªõi ti·ªÅn c∆∞·ª£c")
    @app_commands.describe(bet="S·ªë ti·ªÅn c∆∞·ª£c b·∫°n mu·ªën ƒë·∫∑t")
    async def narutotrap(self, interaction: discord.Interaction, bet: int):
        # S·ª≠ d·ª•ng defer ƒë·ªÉ b√°o cho Discord bi·∫øt bot ƒëang x·ª≠ l√Ω
        await interaction.response.defer(thinking=True)

        # Ki·ªÉm tra t√†i kho·∫£n v√† s·ªë d∆∞
        with getDbSession() as session:
            playerRepo = PlayerRepository(session)
            player = playerRepo.getById(interaction.user.id)
            if not player:
                await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y d√πng /register tr∆∞·ªõc nh√©!")
                return
            if bet <= 0:
                await interaction.followup.send("‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.")
                return
            if player.coin_balance < bet:
                await interaction.followup.send("‚ö†Ô∏è S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß.")
                return

        # Kh·ªüi t·∫°o game (kh√¥ng c·∫ßn session ·ªü ƒë√¢y)
        game = NarutoTrapGame(interaction.user, bet)
        initial_embed = discord.Embed(
            title="üî• Naruto Trap Game üî•",
            description=f"Ti·ªÅn c∆∞·ª£c: **{bet} Ryo**\n\n{game.grid_to_str()}\n\nDi chuy·ªÉn b·∫±ng emoji: ‚¨ÜÔ∏è, ‚û°Ô∏è, ‚¨ÖÔ∏è",
            color=discord.Color.gold()
        )
        # G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi ban ƒë·∫ßu
        await interaction.response.send_message(embed=initial_embed)
        message = await interaction.original_response()

        # Th√™m reaction cho c√°c h∆∞·ªõng di chuy·ªÉn
        directions = {
            "‚¨ÜÔ∏è": "up",
            "‚û°Ô∏è": "right",
            "‚¨ÖÔ∏è": "left"
        }
        for emoji in directions.keys():
            await message.add_reaction(emoji)

        def check(reaction, user):
            return (
                user == interaction.user and
                str(reaction.emoji) in directions and
                reaction.message.id == message.id
            )

        # V√≤ng l·∫∑p di chuy·ªÉn
        while True:
            try:
                reaction, user = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)
            except asyncio.TimeoutError:
                # N·∫øu h·∫øt th·ªùi gian ch·ªù, edit tin nh·∫Øn v·ªõi th√¥ng b√°o timeout v√† k·∫øt th√∫c game
                final_embed = discord.Embed(
                    title="‚è∞ Naruto Trap Game",
                    description=f"H·∫øt th·ªùi gian ch·ªù. Tr√≤ ch∆°i k·∫øt th√∫c!\n\n{game.grid_to_str()}",
                    color=discord.Color.greyple()
                )
                await message.edit(embed=final_embed)
                break

            direction = directions[str(reaction.emoji)]
            valid, result = game.move_player(direction)

            # Xo√° reaction c·ªßa ng∆∞·ªùi ch∆°i ƒë·ªÉ cho ph√©p l·ª±a ch·ªçn l·∫°i
            try:
                await message.remove_reaction(reaction.emoji, user)
            except discord.HTTPException:
                pass

            # C·∫≠p nh·∫≠t tin nh·∫Øn v·ªõi grid m·ªõi
            new_content = f"üî• Naruto Trap Game üî•\nTi·ªÅn c∆∞·ª£c: **{bet} Ryo**\n\n{game.grid_to_str()}\n\nDi chuy·ªÉn: ‚¨ÜÔ∏è, ‚û°Ô∏è, ‚¨ÖÔ∏è"
            await message.edit(content=new_content)

            if not valid:
                # N·∫øu di chuy·ªÉn kh√¥ng h·ª£p l·ªá, ch·ªâ th√¥ng b√°o v√† ti·∫øp t·ª•c v√≤ng l·∫∑p
                continue

            if result == "bomb":
                # N·∫øu ng∆∞·ªùi ch∆°i b·ªã bom, c·∫≠p nh·∫≠t DB: tr·ª´ ti·ªÅn c∆∞·ª£c
                with getDbSession() as session:
                    playerRepo = PlayerRepository(session)
                    player = playerRepo.getById(interaction.user.id)
                    player.coin_balance -= bet
                    session.commit()
                final_embed = discord.Embed(
                    title="üí£ Naruto Trap Game",
                    description=f"B·∫°n r∆°i v√†o b·∫´y!\n\n{game.grid_to_str()}\n\nB·∫°n m·∫•t h·∫øt **{bet} Ryo**.",
                    color=discord.Color.red()
                )
                await message.edit(embed=final_embed)
                break
            elif result == "win":
                # N·∫øu ng∆∞·ªùi ch∆°i th·∫Øng, c·∫≠p nh·∫≠t DB: tr·ª´ ti·ªÅn c∆∞·ª£c, c·ªông th∆∞·ªüng x2
                with getDbSession() as session:
                    playerRepo = PlayerRepository(session)
                    player = playerRepo.getById(interaction.user.id)
                    player.coin_balance = player.coin_balance - bet + (bet * 2)
                    session.commit()
                final_embed = discord.Embed(
                    title="üéâ Naruto Trap Game",
                    description=f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ v∆∞·ª£t qua ch∆∞·ªõng ng·∫°i v√† nh·∫≠n th∆∞·ªüng: x2 ti·ªÅn c∆∞·ª£c!\n\n{game.grid_to_str()}",
                    color=discord.Color.green()
                )
                await message.edit(embed=final_embed)
                break
            # N·∫øu k·∫øt qu·∫£ l√† "moved", v√≤ng l·∫∑p ti·∫øp t·ª•c c·∫≠p nh·∫≠t grid

async def setup(bot: commands.Bot):
    await bot.add_cog(NarutoTrap(bot))
