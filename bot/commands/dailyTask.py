import discord
from discord.ext import commands
from discord import app_commands
from datetime import date

from bot.config.database import getDbSession
from bot.repository.playerRepository import PlayerRepository
from bot.repository.dailyTaskRepository import DailyTaskRepository
from bot.config.dailyTask import DAILY_TASK_CONFIG  # Ch·ª©a requirement & reward cho c√°c nhi·ªám v·ª• h·∫±ng ng√†y

class DailyTask(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
        # M√¥ t·∫£ chi ti·∫øt cho t·ª´ng nhi·ªám v·ª•
        self.taskDescriptions = {
            "fight_win": "Th·∫Øng 10 l·∫ßn b·∫±ng l·ªánh `/fight`",
            "minigame": "Ch∆°i 10 l·∫ßn minigame v·ªõi bot",
            "fightwith": "Khi√™u chi·∫øn 5 l·∫ßn v·ªõi b·∫°n b√® b·∫±ng `/fightwith`",
            "shop_buy": "Mua ƒë·ªì trong shop 3 l·∫ßn",
            "shop_sell": "B√°n ƒë·ªì cho shop 3 l·∫ßn",
            "stage_clear": "ƒêaÃÅnh ·∫£i √≠t nh·∫•t 1 l·∫ßn b·∫±ng l·ªánh `/challenge`",
        }
        
        # Emoji cho t·ª´ng nhi·ªám v·ª•
        self.taskEmojis = {
            "fight_win": "‚öîÔ∏è",
            "minigame": "üéÆ",
            "fightwith": "ü§º",
            "shop_buy": "üõçÔ∏è",
            "shop_sell": "üí∏",
            "stage_clear": "üèÜ",
        }

    @app_commands.command(
        name="dailytask",
        description="Ki·ªÉm tra ti·∫øn ƒë·ªô nhi·ªám v·ª• h·∫±ng ng√†y v√† nh·∫≠n th∆∞·ªüng"
    )
    async def dailytask(self, interaction: discord.Interaction):
        await interaction.response.defer(thinking=True)
        playerId = interaction.user.id
        
        try:
            with getDbSession() as session:
                # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
                playerRepo = PlayerRepository(session)
                player = playerRepo.getById(playerId)
                if not player:
                    await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y d√πng /register tr∆∞·ªõc nh√©!")
                    return
                
                # L·∫•y th√¥ng tin nhi·ªám v·ª• h·∫±ng ng√†y c·ªßa ng∆∞·ªùi ch∆°i (s·∫Ω t·ª± ƒë·ªông reset n·∫øu ng√†y kh√¥ng kh·ªõp)
                dailyTaskRepo = DailyTaskRepository(session)
                dailyTask = dailyTaskRepo.getDailyTaskInfo(playerId)
                
                # L·∫•y ti·∫øn ƒë·ªô c·ªßa t·ª´ng nhi·ªám v·ª• t·ª´ b·∫£ng daily_tasks
                tasksProgress = {
                    "fight_win": dailyTask.fight_win_count,
                    "minigame": dailyTask.minigame_count,
                    "fightwith": dailyTask.fightwith_count,
                    "shop_buy": dailyTask.shop_buy_count,
                    "shop_sell": dailyTask.shop_sell_count,
                    "stage_clear": dailyTask.stage_clear_count,
                }

                totalReward = 0
                descriptionLines = []
                for taskKey, currentCount in tasksProgress.items():
                    requirement = DAILY_TASK_CONFIG[taskKey]["requirement"]
                    reward = DAILY_TASK_CONFIG[taskKey]["reward"]
                    fullDesc = self.taskDescriptions.get(taskKey, taskKey)
                    emoji = self.taskEmojis.get(taskKey, "")
                    
                    # L·∫•y tr·∫°ng th√°i nh·∫≠n th∆∞·ªüng c·ªßa nhi·ªám v·ª•
                    claimed = getattr(dailyTask, f"{taskKey}_claimed")
                    # N·∫øu ƒë√£ ƒë·∫°t y√™u c·∫ßu v√† ph·∫ßn th∆∞·ªüng ch∆∞a ƒë∆∞·ª£c nh·∫≠n, c·ªông th∆∞·ªüng v√† ƒë√°nh d·∫•u ƒë√£ nh·∫≠n
                    if currentCount >= requirement:
                        if not claimed:
                            totalReward += reward
                            setattr(dailyTask, f"{taskKey}_claimed", True)
                            claim_status = "ƒê√£ nh·∫≠n"
                        else:
                            claim_status = "ƒê√£ nh·∫≠n"
                    else:
                        claim_status = "Ch∆∞a ƒë·ªß"

                    # X√¢y d·ª±ng chu·ªói m√¥ t·∫£ cho nhi·ªám v·ª•:
                    # D√≤ng 1: Bullet k√®m emoji, m√¥ t·∫£ nhi·ªám v·ª•, ti·∫øn ƒë·ªô v√† tr·∫°ng th√°i
                    # D√≤ng 2: Th·ª•t ƒë·∫ßu d√≤ng hi·ªÉn th·ªã ph·∫ßn th∆∞·ªüng (d√πng emoji)
                    taskLine = f"{emoji} {fullDesc} (**{currentCount}/{requirement}**) - {claim_status}\n"
                    rewardLine = f"‚Ä¢ üí∞ Th∆∞·ªüng: {reward:,} Ryo"
                    # T·∫°o kho·∫£ng c√°ch 2 d√≤ng gi·ªØa c√°c nhi·ªám v·ª•
                    descriptionLines.append(f"{taskLine}{rewardLine}\n")

                # C·ªông ph·∫ßn th∆∞·ªüng (n·∫øu c√≥ nhi·ªám v·ª• m·ªõi ƒë∆∞·ª£c nh·∫≠n th∆∞·ªüng) v√†o s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i
                if totalReward > 0:
                    player.coin_balance += totalReward
                
                session.commit()
                
                embed = discord.Embed(
                    title=f"Nhi·ªám v·ª• h·∫±ng ng√†y c·ªßa {player.username}",
                    color=discord.Color.green()
                )
                # N·ªëi c√°c chu·ªói, m·ªói nhi·ªám v·ª• c√°ch nhau hai d√≤ng
                embed.description = "\n\n".join(descriptionLines)
                
                if totalReward > 0:
                    embed.add_field(
                        name="Ph·∫ßn th∆∞·ªüng",
                        value=f"B·∫°n nh·∫≠n ƒë∆∞·ª£c t·ªïng c·ªông {totalReward:,} Ryo t·ª´ nhi·ªám v·ª• h√¥m nay.",
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="Th√¥ng tin",
                        value="H√£y n·ªó l·ª±c ho√†n th√†nh c√°c nhi·ªám v·ª• ƒë·ªÉ nh·∫≠n th∆∞·ªüng.",
                        inline=False
                    )
                
                await interaction.followup.send(embed=embed)
                
        except Exception as e:
            print("‚ùå L·ªói khi x·ª≠ l√Ω dailytask:", e)
            await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra nhi·ªám v·ª• h·∫±ng ng√†y. Vui l√≤ng th·ª≠ l·∫°i sau.")

async def setup(bot):
    await bot.add_cog(DailyTask(bot))
