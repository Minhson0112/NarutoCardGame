import discord
from discord.ext import commands
from discord import app_commands

from bot.config.database import getDbSession
from bot.repository.playerRepository import PlayerRepository
from bot.repository.dailyClaimLogRepository import DailyClaimLogRepository
from bot.services.playerService import PlayerService

class Daily(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="daily", description="Nh·∫≠n 10,000 ryo m·ªói ng√†y")
    async def daily(self, interaction: discord.Interaction):
        await interaction.response.defer(thinking=True)

        playerId = interaction.user.id

        try:
            with getDbSession() as session:
                playerRepo = PlayerRepository(session)
                claimRepo = DailyClaimLogRepository(session)
                playerService = PlayerService(playerRepo)

                if claimRepo.hasClaimedToday(playerId):
                    await interaction.followup.send("‚ùó B·∫°n ƒë√£ nh·∫≠n th∆∞·ªüng h√¥m nay r·ªìi. Quay l·∫°i v√†o ng√†y mai nh√©!")
                    return

                # C·ªông 10,000 ryo
                if not playerService.addCoin(playerId, 10000):
                    await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n. D√πng `/register` tr∆∞·ªõc nh√©!")
                    return

                # ƒê√°nh d·∫•u ƒë√£ nh·∫≠n
                claimRepo.markClaimed(playerId)

                await interaction.followup.send("üí∞ B·∫°n ƒë√£ nh·∫≠n 10,000 ryo t·ª´ th∆∞·ªüng h√†ng ng√†y! H·∫πn g·∫∑p l·∫°i mai nh√© üòÑ")
        except Exception as e:
            print("‚ùå L·ªói khi x·ª≠ l√Ω daily:", e)
            await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")

async def setup(bot):
    await bot.add_cog(Daily(bot))
