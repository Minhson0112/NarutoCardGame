import discord
from discord.ext import commands
from discord import app_commands
import random
import asyncio

from bot.config.database import getDbSession
from bot.repository.playerRepository import PlayerRepository
from bot.repository.dailyTaskRepository import DailyTaskRepository

class CoinFlip(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="coinflip", description="Ch∆°i l·∫≠t ƒë·ªìng xu ƒë·ªÉ tr√∫ng th∆∞·ªüng (d·ª± ƒëo√°n √∫p ho·∫∑c ng·ª≠a)")
    @app_commands.describe(
        bet="S·ªë ti·ªÅn c∆∞·ª£c b·∫°n mu·ªën ƒë·∫∑t",
        guess="D·ª± ƒëo√°n c·ªßa b·∫°n: u:uÃÅp ho·∫∑c n:ng∆∞Ãâa"
    )
    async def coinflip(self, interaction: discord.Interaction, bet: int, guess: str):
        await interaction.response.defer(thinking=True)
        guess = guess.lower().strip()
        # Ch·ªâ ch·∫•p nh·∫≠n hai d·ª± ƒëo√°n: "√∫p" v√† "ng·ª≠a"
        if guess not in ["u", "n"]:
            await interaction.followup.send("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng d·ª± ƒëo√°n: **u** ho·∫∑c **n**.")
            return

        try:
            with getDbSession() as session:
                playerRepo = PlayerRepository(session)
                dailyTaskRepo = DailyTaskRepository(session)
                player = playerRepo.getById(interaction.user.id)
                if not player:
                    await interaction.followup.send("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y d√πng /register tr∆∞·ªõc nh√©!")
                    return

                if bet <= 0:
                    await interaction.followup.send("‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.")
                    return
                
                if bet > 1000000:
                    await interaction.followup.send("‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng ƒë∆∞∆°Ã£c quaÃÅ 1m.")
                    return

                if player.coin_balance < bet:
                    await interaction.followup.send("‚ö†Ô∏è S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß.")
                    return
                
                dailyTaskRepo.updateMinigame(interaction.user.id)
                # Th·ª±c hi·ªán l·∫≠t ƒë·ªìng xu (random t·ª´ "√∫p" ƒë·∫øn "ng·ª≠a")
                coin_result = random.choice(["u", "n"])
                
                # X√°c ƒë·ªãnh k·∫øt qu·∫£ v√† c·∫≠p nh·∫≠t s·ªë d∆∞:
                if guess == coin_result:
                    # N·∫øu d·ª± ƒëo√°n ƒë√∫ng, nh√¢n th∆∞·ªüng g·∫•p 2 s·ªë ti·ªÅn c∆∞·ª£c
                    multiplier = 2
                    reward = bet * multiplier
                    outcome_text = (f"ü•≥ Ch√∫c m·ª´ng! K·∫øt qu·∫£ l√† **{coin_result.upper()}**.\n"
                                    f"B·∫°n ƒë√£ d·ª± ƒëo√°n ƒë√∫ng v√† nh·∫≠n th∆∞·ªüng **{reward} Ryo**!")
                    # S·ªë d∆∞ m·ªõi = (coin_balance - bet + reward)
                    player.coin_balance = player.coin_balance - bet + reward
                else:
                    outcome_text = (f"üò¢ R·∫•t ti·∫øc! K·∫øt qu·∫£ l√† **{coin_result.upper()}**.\n"
                                    f"B·∫°n ƒë√£ d·ª± ƒëo√°n sai v√† m·∫•t h·∫øt s·ªë ti·ªÅn c∆∞·ª£c (**{bet} Ryo**).")
                    player.coin_balance -= bet

                session.commit()

                # T·∫°o embed hi·ªÉn th·ªã k·∫øt qu·∫£
                embed_outcome = discord.Embed(
                    title="K·∫øt qu·∫£ L·∫≠t ƒê·ªìng Xu",
                    description=(
                        f"**K·∫øt qu·∫£:** {coin_result.upper()}\n"
                        f"{outcome_text}\n\n"
                        f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: **{player.coin_balance} Ryo**"
                    ),
                    color=discord.Color.purple()
                )

                await interaction.followup.send(embed=embed_outcome)

        except Exception as e:
            print("‚ùå L·ªói khi x·ª≠ l√Ω /coinflip:", e)
            await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")

async def setup(bot):
    await bot.add_cog(CoinFlip(bot))
