from bot.services.cardBase import Card
from bot.services.effectBase import Effect

class HokageKakashi(Card):
    def special_skills(self):
        logs: list[str] = []
        logs.append(f"üåÄ {self.name}  Ninja Sao Ch√©p: sao ch√©p m·ªçi hi·ªáu ·ª©ng buff c·ªßa ƒë·ªëi th·ªß v√† t·∫•n c√¥ng to√†n di·ªán!")

        # 1Ô∏è‚É£ Sao ch√©p t·∫•t c·∫£ hi·ªáu ·ª©ng buff t·ª´ team ƒë·ªãch
        for enemy in self.enemyTeam:
            for effect in enemy.effects:
                if effect.effect_type == "buff":
                    # T·∫°o b·∫£n sao c·ªßa effect
                    copied = Effect(
                        name=effect.name,
                        duration=effect.duration,
                        effect_type=effect.effect_type,
                        value=effect.value,
                        flat_bonus=effect.flat_bonus,
                        description=f"Sao ch√©p {effect.description} t·ª´ {enemy.name}"
                    )
                    self.effects.append(copied)
                    logs.append(f"üîÑ Sao ch√©p {effect.description} t·ª´ {enemy.name} trong {effect.duration} l∆∞·ª£t).")

        # 2Ô∏è‚É£ T·∫•n c√¥ng to√†n b·ªô k·∫ª ƒë·ªãch v·ªõi 400% s√°t th∆∞∆°ng c∆° b·∫£n
        damage = int(self.get_effective_base_damage() * 4)
        alive_enemies = [c for c in self.enemyTeam if c.is_alive()]

        if not alive_enemies:
            logs.append("‚ùå Kh√¥ng c√≥ k·∫ª ƒë·ªãch n√†o ƒë·ªÉ t·∫•n c√¥ng.")
            return logs

        for target in alive_enemies:
            dealt, new_logs = target.receive_damage(
                damage,
                true_damage=False,
                execute_threshold=None,
                attacker=self
            )
            logs.extend(new_logs)

        return logs
